@misc{graalvm,
    title = {{GraalVM}},
    note = {on-line at: \url{https://www.graalvm.org/}},
    author = {Oracle},
    year = {2018--2022}
}

@misc{renaissance,
    title = {{Renaissance Suite, A modern benchmark
suite for the JVMA}},
    note = {on-line at: \url{https://renaissance.dev/}},
    author = {Renaissance Suite},
    year = {2019}
}

@inproceedings{prokopec19,
    author = {Prokopec, Aleksandar and Ros\`{a}, Andrea and Leopoldseder, David and Duboscq, Gilles and T\r{u}ma, Petr and Studener, Martin and Bulej, Lubom\'{\i}r and Zheng, Yudi and Villaz\'{o}n, Alex and Simon, Doug and W\"{u}rthinger, Thomas and Binder, Walter},
    title = {Renaissance: Benchmarking Suite for Parallel Applications on the JVM},
    year = {2019},
    isbn = {9781450367127},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3314221.3314637},
    doi = {10.1145/3314221.3314637},
    abstract = {Established benchmark suites for the Java Virtual Machine (JVM), such as DaCapo, ScalaBench, and SPECjvm2008, lack workloads that take advantage of the parallel programming abstractions and concurrency primitives offered by the JVM and the Java Class Library. However, such workloads are fundamental for understanding the way in which modern applications and data-processing frameworks use the JVM's concurrency features, and for validating new just-in-time (JIT) compiler optimizations that enable more efficient execution of such workloads. We present Renaissance, a new benchmark suite composed of modern, real-world, concurrent, and object-oriented workloads that exercise various concurrency primitives of the JVM. We show that the use of concurrency primitives in these workloads reveals optimization opportunities that were not visible with the existing workloads. We use Renaissance to compare performance of two state-of-the-art, production-quality JIT compilers (HotSpot C2 and Graal), and show that the performance differences are more significant than on existing suites such as DaCapo and SPECjvm2008. We also use Renaissance to expose four new compiler optimizations, and we analyze the behavior of several existing ones. We use Renaissance to compare performance of two state-of-the-art, production-quality JIT compilers (HotSpot C2 and Graal), and show that the performance differences are more significant than on existing suites such as DaCapo and SPECjvm2008. We also use Renaissance to expose four new compiler optimizations, and we analyze the behavior of several existing ones.},
    booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
    pages = {31–47},
    numpages = {17},
    keywords = {functional programming benchmarks, parallelism, concurrency, benchmarks, JVM, Big Data benchmarks, object-oriented programming benchmarks, JIT compilation},
    location = {Phoenix, AZ, USA},
    series = {PLDI 2019}
}

@inproceedings{niephaus19adapters,
  title={Towards polyglot adapters for the graalvm},
  author={Niephaus, Fabio and Felgentreff, Tim and Hirschfeld, Robert},
  booktitle={Proceedings of the conference companion of the 3rd international conference on art, science, and engineering of programming},
  pages={1--3},
  year={2019}
}

@article{grimmer15,
    author = {Grimmer, Matthias and Seaton, Chris and Schatz, Roland and W\"{u}rthinger, Thomas and M\"{o}ssenb\"{o}ck, Hanspeter},
    title = {High-Performance Cross-Language Interoperability in a Multi-Language Runtime},
    year = {2015},
    issue_date = {Feburary 2016},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {51},
    number = {2},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2936313.2816714},
    doi = {10.1145/2936313.2816714},
    abstract = {Programmers combine different programming languages because it allows them to use the most suitable language for a given problem, to gradually migrate existing projects from one language to another, or to reuse existing source code. However, existing cross-language mechanisms suffer from complex interfaces, insufficient flexibility, or poor performance. We present the TruffleVM, a multi-language runtime that allows composing different language implementations in a seamless way. It reduces the amount of required boiler-plate code to a minimum by allowing programmers to access foreign functions or objects by using the notation of the host language. We compose language implementations that translate source code to an intermediate representation (IR), which is executed on top of a shared runtime system. Language implementations use language-independent messages that the runtime resolves at their first execution by transforming them to efficient foreign-language-specific operations. The TruffleVM avoids conversion or marshaling of foreign objects at the language boundary and allows the dynamic compiler to perform its optimizations across language boundaries, which guarantees high performance. This paper presents an implementation of our ideas based on the Truffle system and its guest language implementations JavaScript, Ruby, and C.},
    journal = {SIGPLAN Not.},
    month = {oct},
    pages = {78–90},
    numpages = {13},
    keywords = {language interoperability, virtual machine, cross-language, language implementation, optimization}
}


@inproceedings{vsipek19,
  title={Exploring aspects of polyglot high-performance virtual machine GraalVM},
  author={{\v{S}}ipek, Matija and Mihaljevi{\'c}, B and Radovan, Aleksander},
  booktitle={2019 42nd International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO)},
  pages={1671--1676},
  year={2019},
  organization={IEEE}
}

@mastersthesis{fjeldberg08,
  title={Polyglot programming},
  author={Fjeldberg, Hans-Christian},
  year={2008}
}

@inproceedings{niephaus19graalsqueak,
  title={GraalSqueak: toward a smalltalk-based tooling platform for polyglot programming},
  author={Niephaus, Fabio and Felgentreff, Tim and Hirschfeld, Robert},
  booktitle={Proceedings of the 16th ACM SIGPLAN International Conference on Managed Programming Languages and Runtimes},
  pages={14--26},
  year={2019}
}

@mastersthesis{harmanen13,
  title={Polyglot Programming in Web Development},
  author={Harmanen, Juhana},
  year={2013}
}

@inproceedings{peterson21,
  title={Investigating the Effect of Polyglot Programming on Developers},
  author={Peterson, Cole S},
  booktitle={2021 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
  pages={1--2},
  year={2021},
  organization={IEEE}
}

@inproceedings{hao20,
  title={Approaching polyglot programming: what can we learn from bilingualism studies?},
  author={Hao, Rebecca L and Glassman, Elena L},
  booktitle={10th Workshop on Evaluation and Usability of Programming Languages and Tools (PLATEAU 2019)},
  year={2020},
  organization={Schloss Dagstuhl-Leibniz-Zentrum f{\"u}r Informatik}
}

@inproceedings{romero21,
  title={Polyglot Programming with GraalVM Applied to Bioinformatics for DNA Sequence Analysis},
  author={Romero-Ventura, Jos{\'e} Antonio and Ju{\'a}rez-Mart{\'\i}nez, Ulises and Centeno-T{\'e}llez, Adolfo},
  booktitle={International Conference on Software Process Improvement},
  pages={163--173},
  year={2021},
  organization={Springer}
}

@misc{larsson20,
  title={Evaluation of GraalVM Performance for Java Programs},
  author={Larsson, Robin},
  year={2020}
}

@article{sipek21,
  title={Enhancing performance of cloud-based software applications with GraalVM and quarkus},
  author={Sipek, Matija and Muharemagic, D and Mihaljevic, Branko and Radovan, Aleksander},
  journal={arXiv preprint arXiv:2201.11851},
  year={2021}
}

@article{kranzl19,
  title={Symbolic Execution for Compiler Optimizations on the GraalVM},
  author={Kranzl, Birgit},
  year={2019}
}

@inproceedings{stadler13,
  title={An experimental study of the influence of dynamic compiler optimizations on scala performance},
  author={Stadler, Lukas and Duboscq, Gilles and M{\"o}ssenb{\"o}ck, Hanspeter and W{\"u}rthinger, Thomas and Simon, Doug},
  booktitle={Proceedings of the 4th Workshop on Scala},
  pages={1--8},
  year={2013}
}

@inproceedings{yuhala21,
  title={Montsalvat: Intel SGX shielding for GraalVM native images},
  author={Yuhala, Peterson and M{\'e}n{\'e}trey, J{\"a}mes and Felber, Pascal and Schiavoni, Valerio and Tchana, Alain and Thomas, Ga{\"e}l and Guiroux, Hugo and Lozi, Jean-Pierre},
  booktitle={Proceedings of the 22nd International Middleware Conference},
  pages={352--364},
  year={2021}
}

@misc{fong21,
  title={Performance comparison of GraalVM, Oracle JDK and OpenJDK for optimization of test suite execution time},
  author={Fong, Fredric and Raed, Mustafa},
  year={2021}
}

@inproceedings{wimmer21,
  title={GraalVM native image: large-scale static analysis for Java (keynote)},
  author={Wimmer, Christian},
  booktitle={Proceedings of the 13th ACM SIGPLAN International Workshop on Virtual Machines and Intermediate Languages},
  pages={3--3},
  year={2021}
}

@mastersthesis{wang21,
  title={Thin Serverless Functions with GraalVM Native Image},
  author={Wang, Sutao},
  year={2021},
  school={ETH Zurich}
}

@mastersthesis{lionas21,
  title={Runtime Object Lifetime Profiler for the Virtual Machine GraalVM},
  author={Lionas, Domantas},
  year={2021}
}

@TechReport{dacapo,
  title={The {DaCapo} {Benchmarks}: {Java} Benchmarking Development and Analysis (Extended Version)},
  author={Blackburn, S. M. and Garner, R. and Hoffman, C. and Khan, A. M.
      and McKinley, K. S. and Bentzur, R. and Diwan, A. and Feinberg, D.
      and Frampton, D. and Guyer, S. Z. and Hirzel, M. and Hosking, A.
      and Jump, M. and Lee, H. and Moss, J. E. B. and Phansalkar, A.
      and Stefanovi\'{c}, D.
      and {VanDrunen}, T. and von~Dincklage, D. and Wiedermann, B.},
  institution = {ANU},
  number = {TR-CS-06-01},
  year = {2006},
  note = {http://www.dacapobench.org}
}

@article {OneVMToRullThemAll,
	title={{One VM to Rule Them All}}
}
